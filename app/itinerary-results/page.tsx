"use client"

import { useState, useEffect } from "react"
import { useRouter } from "next/navigation"
import Link from "next/link"
import { Button } from "../../components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "../../components/ui/card"
import { Download, Printer, Save, RotateCcw, Plane, X, Eye } from "lucide-react"
import { useLanguageStore } from "../../lib/language-store"

// 다국어 지원
const translations = {
  ko: {
    title: "🎉 추천 여행 일정",
    subtitle: "AI가 생성한 완벽한 맞춤형 여행 일정을 확인하세요 ✨",
    customSchedule: "🎯 나만의 맞춤 일정 만들기",
    customScheduleDesc: "아래에서 원하는 여행지와 음식점을 선택하면, AI가 최적의 동선으로 새로운 일정을 생성해드립니다.",
    selectedItems: "현재 선택된 항목",
    regenerateBtn: "✨ 혼합 일정 재생성하기",
    itinerary1: "🌟 추천 일정 1",
    itinerary2: "🌟 추천 일정 2",
    detailView: "자세히 보기",
    attractions: "볼거리 (명소)",
    restaurants: "먹거리 (음식점 또는 음식)",
    save: "일정 저장",
    download: "일정 다운로드",
    print: "바로 프린터"
  },
  en: {
    title: "🎉 Recommended Travel Itinerary",
    subtitle: "Check out the perfect customized travel itinerary generated by AI ✨",
    customSchedule: "🎯 Create Your Custom Itinerary",
    customScheduleDesc: "Select your desired destinations and restaurants below, and AI will generate a new itinerary with optimal routes.",
    selectedItems: "Currently selected items",
    regenerateBtn: "✨ Regenerate Mixed Itinerary",
    itinerary1: "🌟 Recommended Itinerary 1",
    itinerary2: "🌟 Recommended Itinerary 2",
    detailView: "View Details",
    attractions: "Attractions (Places to Visit)",
    restaurants: "Food (Restaurants or Cuisine)",
    save: "Save Itinerary",
    download: "Download Itinerary",
    print: "Print Directly"
  },
  ja: {
    title: "🎉 おすすめ旅行プラン",
    subtitle: "AIが生成した完璧なカスタマイズ旅行プランをご確認ください ✨",
    customSchedule: "🎯 オリジナルプラン作成",
    customScheduleDesc: "下記から希望する観光地とレストランを選択すると、AIが最適なルートで新しいプランを生成します。",
    selectedItems: "現在選択中のアイテム",
    regenerateBtn: "✨ ミックスプラン再生成",
    itinerary1: "🌟 おすすめプラン 1",
    itinerary2: "🌟 おすすめプラン 2",
    detailView: "詳細表示",
    attractions: "観光地 (見どころ)",
    restaurants: "グルメ (レストランまたは料理)",
    save: "プラン保存",
    download: "プランダウンロード",
    print: "直接印刷"
  },
  zh: {
    title: "🎉 推荐旅行行程",
    subtitle: "查看AI生成的完美定制旅行行程 ✨",
    customSchedule: "🎯 制定专属行程",
    customScheduleDesc: "从下方选择您想要的旅游景点和餐厅，AI将生成最优路线的新行程。",
    selectedItems: "当前选择的项目",
    regenerateBtn: "✨ 重新生成混合行程",
    itinerary1: "🌟 推荐行程 1",
    itinerary2: "🌟 推荐行程 2",
    detailView: "查看详情",
    attractions: "景点 (观光地)",
    restaurants: "美食 (餐厅或料理)",
    save: "保存行程",
    download: "下载行程",
    print: "直接打印"
  },
  vi: {
    title: "🎉 Lịch Trình Du Lịch Đề Xuất",
    subtitle: "Xem lịch trình du lịch tùy chỉnh hoàn hảo được tạo bởi AI ✨",
    customSchedule: "🎯 Tạo Lịch Trình Riêng",
    customScheduleDesc: "Chọn các điểm đến và nhà hàng mong muốn bên dưới, AI sẽ tạo lịch trình mới với tuyến đường tối ưu.",
    selectedItems: "Các mục hiện được chọn",
    regenerateBtn: "✨ Tạo Lại Lịch Trình Hỗn Hợp",
    itinerary1: "🌟 Lịch Trình Đề Xuất 1",
    itinerary2: "🌟 Lịch Trình Đề Xuất 2",
    detailView: "Xem Chi Tiết",
    attractions: "Điểm Tham Quan (Danh Lam)",
    restaurants: "Ẩm Thực (Nhà Hàng hoặc Món Ăn)",
    save: "Lưu Lịch Trình",
    download: "Tải Lịch Trình",
    print: "In Trực Tiếp"
  },
  id: {
    title: "🎉 Itinerary Perjalanan yang Direkomendasikan",
    subtitle: "Lihat itinerary perjalanan kustom sempurna yang dibuat oleh AI ✨",
    customSchedule: "🎯 Buat Itinerary Pribadi",
    customScheduleDesc: "Pilih destinasi dan restoran yang diinginkan di bawah, AI akan membuat itinerary baru dengan rute optimal.",
    selectedItems: "Item yang dipilih saat ini",
    regenerateBtn: "✨ Buat Ulang Itinerary Campuran",
    itinerary1: "🌟 Itinerary Rekomendasi 1",
    itinerary2: "🌟 Itinerary Rekomendasi 2",
    detailView: "Lihat Detail",
    attractions: "Tempat Wisata (Objek Wisata)",
    restaurants: "Kuliner (Restoran atau Masakan)",
    save: "Simpan Itinerary",
    download: "Unduh Itinerary",
    print: "Cetak Langsung"
  }
}

// 모달 컴포넌트
function DetailModal({ isOpen, onClose, title, children }: { 
  isOpen: boolean; 
  onClose: () => void; 
  title: string; 
  children: React.ReactNode;
}) {
  if (!isOpen) return null;

  const handleSaveSchedule = () => {
    alert("일정이 저장되었습니다! 💾")
  }

  const handleDownload = () => {
    alert("일정이 다운로드됩니다! 📱")
  }

  const handlePrint = () => {
    window.print()
  }

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white dark:bg-gray-800 rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        <div className="flex justify-between items-center p-6 border-b">
          <h2 className="text-2xl font-bold">{title} - 상세 정보</h2>
          <Button variant="ghost" size="sm" onClick={onClose}>
            <X className="w-4 h-4" />
          </Button>
        </div>
        <div className="p-6">
          {children}
          
          {/* 모달 내 액션 버튼들 */}
          <div className="flex flex-wrap gap-4 mt-6 pt-6 border-t">
            <Button onClick={handleSaveSchedule} className="flex items-center space-x-2 bg-blue-600 hover:bg-blue-700">
              <Save className="w-4 h-4" />
              <span>일정 저장</span>
            </Button>
            <Button onClick={handleDownload} className="flex items-center space-x-2 bg-green-600 hover:bg-green-700">
              <Download className="w-4 h-4" />
              <span>일정 다운로드</span>
            </Button>
            <Button onClick={handlePrint} variant="outline" className="flex items-center space-x-2">
              <Printer className="w-4 h-4" />
              <span>바로 프린터</span>
            </Button>
          </div>
        </div>
      </div>
    </div>
  )
}

export default function ItineraryResultsPage() {
  const [selectedItems, setSelectedItems] = useState<Set<string>>(new Set())
  const [modalData, setModalData] = useState<{
    isOpen: boolean;
    title: string;
    content: React.ReactNode;
  }>({
    isOpen: false,
    title: "",
    content: null
  })

  // 여행 일정 데이터 상태 추가
  const [plans, setPlans] = useState<{ plan_a: any; plan_b: any } | null>(null)

  const { language } = useLanguageStore()
  const t = translations[language as keyof typeof translations]

  const router = useRouter();
  useEffect(() => {
    const result = localStorage.getItem("itineraryResult");
    if (result) {
      try {
        const data = JSON.parse(result);
        if (data.status === "fallback" || data.error_message) {
          alert("죄송합니다. 일시적인 오류로 인해 여행 일정을 생성하지 못했습니다.");
          router.replace("/create-itinerary");
        } else {
          setPlans({ plan_a: data.plan_a, plan_b: data.plan_b })
        }
      } catch (e) {
        // 파싱 에러 등 예외 무시
      }
    }
  }, [router]);

  const handleCheckboxChange = (itemId: string) => {
    const newSelected = new Set(selectedItems)
    if (newSelected.has(itemId)) {
      newSelected.delete(itemId)
    } else {
      newSelected.add(itemId)
    }
    setSelectedItems(newSelected)
  }

  const handleCreateCustomSchedule = () => {
    if (selectedItems.size === 0) {
      alert("최소 1개 이상의 항목을 선택해주세요!")
      return
    }
    alert(`선택된 ${selectedItems.size}개 항목으로 커스텀 일정이 생성됩니다! ✨`)
  }

  // 일정 상세 모달 동적 생성
  const openModal = (title: string, content: React.ReactNode) => {
    setModalData({
      isOpen: true,
      title,
      content
    })
  }
  const closeModal = () => {
    setModalData({
      isOpen: false,
      title: "",
      content: null
    })
  }

  // 일정 상세 정보 동적 생성 함수
  const getDetailContent = (plan: any) => (
    <div className="space-y-6">
      {plan.daily_plans.map((day: any, idx: number) => (
        <div key={idx} className="border-b pb-4">
          <h3 className="text-xl font-bold mb-3">Day {day.day}: {day.theme}</h3>
          <div className="mb-4">
            {day.activities.map((act: any, i: number) => (
              <div key={i} className="mb-2 p-2 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
                <div className="font-semibold">{act.time} - {act.activity}</div>
                <div className="text-sm text-gray-600 dark:text-gray-300">{act.location} | {act.description}</div>
                <div className="text-xs text-gray-400">{act.duration} {act.cost && `| 비용: ${act.cost}`}</div>
                {act.tips && <div className="text-xs text-green-600">Tip: {act.tips}</div>}
              </div>
            ))}
          </div>
          {day.meals && (
            <div className="text-xs text-gray-500 mb-2">🍽️ 식사: {Object.entries(day.meals).map(([k, v]) => `${k}: ${v}`).join(", ")}</div>
          )}
          {day.transportation && (
            <div className="text-xs text-gray-500 mb-2">🚗 이동: {day.transportation.join(", ")}</div>
          )}
          {day.estimated_cost && (
            <div className="text-xs text-gray-500 mb-2">💸 예상비용: {day.estimated_cost}</div>
          )}
        </div>
      ))}
    </div>
  )

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-purple-50 to-green-50 dark:from-gray-900 dark:via-purple-900/20 dark:to-blue-900/20 py-12">
      <div className="container mx-auto px-4">
        <div className="text-center mb-8">
          <Link href="/" className="flex items-center justify-center space-x-3 mb-8">
            <div className="w-10 h-10 bg-gradient-to-br from-blue-600 to-purple-600 rounded-xl flex items-center justify-center">
              <Plane className="w-6 h-6 text-white transform rotate-45" />
            </div>
            <span className="text-2xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
              Plan Go
            </span>
          </Link>
          <h1 className="text-5xl font-bold mb-6 bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent">
            {t.title}
          </h1>
          <p className="text-xl text-gray-600 dark:text-gray-300 mb-8">{t.subtitle}</p>
          
          {/* 혼합 일정 생성 섹션을 상단으로 이동 - 항상 표시 */}
                      <div className="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm rounded-2xl p-6 shadow-xl mb-8">
              <div className="mb-4">
                <h2 className="text-2xl font-bold text-gray-800 dark:text-gray-200 mb-2">
                  {t.customSchedule}
                </h2>
                <p className="text-gray-600 dark:text-gray-300">
                  {t.customScheduleDesc}
                </p>
                <span className="inline-block mt-3 text-lg font-semibold text-purple-600 dark:text-purple-400">
                  {t.selectedItems}: {selectedItems.size}개
                </span>
              </div>
              <Button 
                onClick={handleCreateCustomSchedule}
                className="bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white px-8 py-3 text-lg shadow-xl"
              >
                {t.regenerateBtn}
              </Button>
            </div>
        </div>

        <div className="grid lg:grid-cols-2 gap-8">
          {/* Itinerary 1 */}
          {plans && plans.plan_a && (
            <Card className="shadow-2xl border-0 bg-white/90 dark:bg-gray-800/90 backdrop-blur-sm">
              <CardHeader className="bg-gradient-to-r from-blue-500 to-purple-500 text-white">
                <CardTitle className="text-3xl text-center">{t.itinerary1}</CardTitle>
                <div className="mt-4 p-4 bg-white/20 rounded-lg">
                  <h4 className="font-bold text-lg mb-3">{plans.plan_a.title}</h4>
                  <div className="mb-2 text-base">{plans.plan_a.concept}</div>
                </div>
              </CardHeader>
              <CardContent className="space-y-8 p-6">
                <Button onClick={() => openModal(t.itinerary1, getDetailContent(plans.plan_a))} variant="outline" size="sm" className="flex items-center space-x-2">
                  <Eye className="w-4 h-4" />
                  <span>{t.detailView}</span>
                </Button>
                {/* 일정 요약 리스트 */}
                {plans.plan_a.daily_plans.map((day: any, idx: number) => (
                  <div key={idx} className="mb-6">
                    <div className="font-bold text-lg mb-2">Day {day.day}: {day.theme}</div>
                    <ul className="list-disc ml-6">
                      {day.activities.map((act: any, i: number) => (
                        <li key={i}>{act.time} - {act.activity} ({act.location})</li>
                      ))}
                    </ul>
                  </div>
                ))}
              </CardContent>
            </Card>
          )}
          {/* Itinerary 2 */}
          {plans && plans.plan_b && (
            <Card className="shadow-2xl border-0 bg-white/90 dark:bg-gray-800/90 backdrop-blur-sm">
              <CardHeader className="bg-gradient-to-r from-green-500 to-teal-500 text-white">
                <CardTitle className="text-3xl text-center">{t.itinerary2}</CardTitle>
                <div className="mt-4 p-4 bg-white/20 rounded-lg">
                  <h4 className="font-bold text-lg mb-3">{plans.plan_b.title}</h4>
                  <div className="mb-2 text-base">{plans.plan_b.concept}</div>
                </div>
              </CardHeader>
              <CardContent className="space-y-8 p-6">
                <Button onClick={() => openModal(t.itinerary2, getDetailContent(plans.plan_b))} variant="outline" size="sm" className="flex items-center space-x-2">
                  <Eye className="w-4 h-4" />
                  <span>{t.detailView}</span>
                </Button>
                {/* 일정 요약 리스트 */}
                {plans.plan_b.daily_plans.map((day: any, idx: number) => (
                  <div key={idx} className="mb-6">
                    <div className="font-bold text-lg mb-2">Day {day.day}: {day.theme}</div>
                    <ul className="list-disc ml-6">
                      {day.activities.map((act: any, i: number) => (
                        <li key={i}>{act.time} - {act.activity} ({act.location})</li>
                      ))}
                    </ul>
                  </div>
                ))}
              </CardContent>
            </Card>
          )}
        </div>
        {/* 모달 */}
        <DetailModal 
          isOpen={modalData.isOpen}
          onClose={closeModal}
          title={modalData.title}
        >
          {modalData.content}
        </DetailModal>
      </div>
    </div>
  )
}
